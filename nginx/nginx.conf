events {
    worker_connections  1024;  ## Default: 1024
}

pid        /var/run/nginx.pid;

http {
    sendfile        off;
    tcp_nopush      on;
    directio        512;
    default_type    application/octet-stream;

    # include       mime.types;

    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;
        root         /var/www;

        # Let streams be delivered via XHR.
        # You'd also want to configure a `crossdomain.xml` file
        # for Flash-based players.
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET";

        location ~ ^/live/(.+\.ts)$ {
            alias /var/www/live/$1;

            # Let the MPEG-TS video chunks be cacheable
            expires max;
        }

        location ~ ^/live/(.+\.m3u8)$ {
            alias /var/www/live/$1;

            # The M3U8 playlists should not be cacheable
            expires -1d;
        }

        # rtmp stat
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            # you can move stat.xsl to a different location
            root /home/jed/build/nginx-rtmp-module;
        }
    }
}

rtmp {
    server {
        listen 1935;
        chunk_size 4000;

        application stream {
            live on;

            # No RTMP playback
            # deny play all;

            # Push this stream to the local HLS packaging application
            push rtmp://127.0.0.1:1935/ffmpeg;

            # HTTP callback when a stream starts publishing
            # Should return 2xx to allow, 3xx to redirect, anything else to deny.
            # /on_publish should check to see if stream key is associated with an acocunt,
            # and then redirects to the account username if it is, otherwise rejects stream.
            on_publish http://localhost:8000/on_publish;

            # Called when a stream stops publishing.  Response is ignored.
            # on_publish_done http://127.0.0.1:8080/on_publish_done;
        }

        application ffmpeg {
          live on;

          # No RTMP playback
          # deny play all;

          exec ffmpeg	-i rtmp://127.0.0.1:1935/stream/$name -async 1 -vsync -1
                      -c:v libx264 -c:a libvo_aacenc -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/hls-live/$name_low
                      -c:v libx264 -c:a libvo_aacenc -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/hls-live/$name_mid
                      -c:v libx264 -c:a libvo_aacenc -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/hls-live/$name_high
                      -c:v libx264 -c:a libvo_aacenc -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/hls-live/$name_hd720
                      -c copy -f flv rtmp://localhost/hls-live/$name_src;
        }

        application hls-live {
            live on;

            # No RTMP playback
            deny play all;

            # Package this stream as HLS
            hls on;
            hls_path /var/www/live;

            # Put streams in their own subdirectory under `hls_path`
            hls_nested on;
            hls_fragment_naming system;

            # HLS config
            hls_fragment 3;
            hls_playlist_length 60;
            hls_sync 100ms;

            # Instruct clients to adjust resolution according to bandwidth
            hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
            hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
            hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
            hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
            hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
        }
    }
}
